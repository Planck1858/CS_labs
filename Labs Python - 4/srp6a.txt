===Протокол SRP-6a===

H - хэш-функция 
N - простое = 2*q+1, где q - простое
g - генератор по модулю N: для любого 0<X<N существует единственный x_ такой, что g^x_ mod N = X 
k - параметр-множитель(=3)

1) Регистрация:
    На клиенте генерируются:
        s - случайная строка
        x = H(S, password)
        g^x mod N
    Клиент отсылает серверу:
        I - имя пользователя    \
        s - соль                 - все эти поля хранятся в БД
        v - верификатор пароля  /
2)Пользователь(клиент) отправляет на сервер А и I
    I - Имя пользователя
    A = g^a mod N, где а - cлучайное число
3)Сервер должен убедиться, что А != 0
    - Затем сервер генерирует случайное число b
    и вычисчляет B = (k*v + g^b mod N) mod N.
    - Затем сервер отсылает клиенту s-соль и B 
4)Клиент должен убедиться, что B !=0
5) Клиент и сервер оба вычисляют
    u = H(A, B)
    Если u = 0, то ошибка 
6) Клиент на основе введенного пароля вычисляет:
    общий ключ H = (s, password)
    S = ((S - k *(g^x mod N))^(a + u*x)) mod N
    K = H(S)
7) Сервер вычисляет 
    S = A * (v^u mod N)
    K = H(S)
8) Клиент и сервер имеют одинаковые ключи k

Генерация подтверждения - вторая фаза
    Клиент вычисляет: 
        M = H(H(N) xor H(g), H(I), s, A, B, K)
    И отсылает это серверу

    Сервер вычисляет такое же M.
    Если оба M совпали - то ОК
    и клиенту отсылается R = H(A, M, K)

    Клиент вычисляет свою R и если она совпала с серверной, то всё ОК


==============
1) Использовать потоки для генерации простых чисел
2) Для генерауции соли использовать апаратные особенности(например, строка + мас адресс)
3) Проводить всё в одном HTP соединении

AC6BDB41324A9A9BF166DE5E1389582FAF72B6651987EE07FC3192943DB56050A37329CBB4A099ED8193E0757767A13DD52312AB4B03310D"CD7F48A9DA04FD50E8083969EDB767B0CF6095179A163AB3661A05FBD5FAAAE82918A9962F0B93B855F97993EC975EEAA80D740ADBF4FF747359D041D5C33EA71D281E446B14773BCA97B43A23FB801676BD207A436C6481F1D2B9078717461A5B9D32E688F87748544523B524B0D57D5EA77A2775D2ECFA032CFBDBF52FB3786160279004E57AE6AF874E7303CE53299CCC041C7BC308D82A5698F3A8D0C38271AE35F8E9DBFBB694B5C803D89F7AE435DE236D525F54759B65E372FCD68EF20FA7111F9E4AFF73